<?php

namespace Unity\Domain\Proxy\__CG__\Unity\Domain\Model;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Release extends \Unity\Domain\Model\Release implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setTitle($title)
    {
        $this->__load();
        return parent::setTitle($title);
    }

    public function getTitle()
    {
        $this->__load();
        return parent::getTitle();
    }

    public function setDescription($desc)
    {
        $this->__load();
        return parent::setDescription($desc);
    }

    public function getDescription()
    {
        $this->__load();
        return parent::getDescription();
    }

    public function setStartDate(\DateTime $date)
    {
        $this->__load();
        return parent::setStartDate($date);
    }

    public function getStartDate()
    {
        $this->__load();
        return parent::getStartDate();
    }

    public function setEndDate(\DateTime $date)
    {
        $this->__load();
        return parent::setEndDate($date);
    }

    public function getEndDate()
    {
        $this->__load();
        return parent::getEndDate();
    }

    public function getDueDate()
    {
        $this->__load();
        return parent::getDueDate();
    }

    public function setDueDate(\DateTime $dueDate)
    {
        $this->__load();
        return parent::setDueDate($dueDate);
    }

    public function getBackLog()
    {
        $this->__load();
        return parent::getBackLog();
    }

    public function setProduct(\Unity\Domain\Model\Product $product = NULL)
    {
        $this->__load();
        return parent::setProduct($product);
    }

    public function product()
    {
        $this->__load();
        return parent::product();
    }

    public function backlog()
    {
        $this->__load();
        return parent::backlog();
    }

    public function addStory(\Unity\Domain\Model\Story $story)
    {
        $this->__load();
        return parent::addStory($story);
    }

    public function removeStory(\Unity\Domain\Model\Story $story)
    {
        $this->__load();
        return parent::removeStory($story);
    }

    public function asSprints(\Doctrine\Common\Collections\Collection $stories, $velocity)
    {
        $this->__load();
        return parent::asSprints($stories, $velocity);
    }

    public function addSprint(\Unity\Domain\Model\Sprint $sprint)
    {
        $this->__load();
        return parent::addSprint($sprint);
    }

    public function sprints()
    {
        $this->__load();
        return parent::sprints();
    }

    public function unplannedBacklog()
    {
        $this->__load();
        return parent::unplannedBacklog();
    }

    public function plannedBacklog()
    {
        $this->__load();
        return parent::plannedBacklog();
    }

    public function epicBacklog()
    {
        $this->__load();
        return parent::epicBacklog();
    }

    public function sprint($sprintId)
    {
        $this->__load();
        return parent::sprint($sprintId);
    }

    public function removeSprint(\Unity\Domain\Model\Sprint $sprint)
    {
        $this->__load();
        return parent::removeSprint($sprint);
    }

    public function sprintThrough(\DateTime $date)
    {
        $this->__load();
        return parent::sprintThrough($date);
    }

    public function clearBacklog()
    {
        $this->__load();
        return parent::clearBacklog();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'title', 'description', 'startDate', 'endDate', 'dueDate', 'product', 'stories', 'sprints');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}