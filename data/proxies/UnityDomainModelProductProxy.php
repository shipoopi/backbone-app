<?php

namespace Unity\Domain\Proxy;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class UnityDomainModelProductProxy extends \Unity\Domain\Model\Product implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    private function _load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    
    public function getId()
    {
        $this->_load();
        return parent::getId();
    }

    public function setName($name)
    {
        $this->_load();
        return parent::setName($name);
    }

    public function getName()
    {
        $this->_load();
        return parent::getName();
    }

    public function setDescription($desc)
    {
        $this->_load();
        return parent::setDescription($desc);
    }

    public function getDescription()
    {
        $this->_load();
        return parent::getDescription();
    }

    public function setUserId($id)
    {
        $this->_load();
        return parent::setUserId($id);
    }

    public function getUserId()
    {
        $this->_load();
        return parent::getUserId();
    }

    public function getBackLog()
    {
        $this->_load();
        return parent::getBackLog();
    }

    public function addStory(\Unity\Domain\Model\Story $story)
    {
        $this->_load();
        return parent::addStory($story);
    }

    public function stories()
    {
        $this->_load();
        return parent::stories();
    }

    public function getStory($storyId)
    {
        $this->_load();
        return parent::getStory($storyId);
    }

    public function deleteStory(\Unity\Domain\Model\Story $story)
    {
        $this->_load();
        return parent::deleteStory($story);
    }

    public function user()
    {
        $this->_load();
        return parent::user();
    }

    public function setUser(\Unity\Domain\Model\User $user = NULL)
    {
        $this->_load();
        return parent::setUser($user);
    }

    public function team()
    {
        $this->_load();
        return parent::team();
    }

    public function backlog()
    {
        $this->_load();
        return parent::backlog();
    }

    public function unassignedStoriesBacklog()
    {
        $this->_load();
        return parent::unassignedStoriesBacklog();
    }

    public function releasePlannedBacklog()
    {
        $this->_load();
        return parent::releasePlannedBacklog();
    }

    public function sprintUnplannedBacklog()
    {
        $this->_load();
        return parent::sprintUnplannedBacklog();
    }

    public function sprintPlannedBacklog()
    {
        $this->_load();
        return parent::sprintPlannedBacklog();
    }

    public function releases()
    {
        $this->_load();
        return parent::releases();
    }

    public function isOverlapping(\Unity\Domain\Model\Release $existing)
    {
        $this->_load();
        return parent::isOverlapping($existing);
    }

    public function addRelease(\Unity\Domain\Model\Release $toAdd)
    {
        $this->_load();
        return parent::addRelease($toAdd);
    }

    public function removeRelease(\Unity\Domain\Model\Release $release)
    {
        $this->_load();
        return parent::removeRelease($release);
    }

    public function averageVelocity()
    {
        $this->_load();
        return parent::averageVelocity();
    }

    public function currentRelease()
    {
        $this->_load();
        return parent::currentRelease();
    }

    public function currentSprint()
    {
        $this->_load();
        return parent::currentSprint();
    }

    public function release($releaseId)
    {
        $this->_load();
        return parent::release($releaseId);
    }

    public function storyStatuses()
    {
        $this->_load();
        return parent::storyStatuses();
    }

    public function addStoryStatus(\Unity\Domain\Model\StoryStatus $status)
    {
        $this->_load();
        return parent::addStoryStatus($status);
    }

    public function removeStoryStatus($status)
    {
        $this->_load();
        return parent::removeStoryStatus($status);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'name', 'description', 'stories', 'releases', 'userId', 'user', 'members', 'storyStatuses');
    }
}